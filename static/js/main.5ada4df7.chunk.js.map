{"version":3,"sources":["utils/tracerParser.js","utils/formatters.js","App.js","index.js"],"names":["parseDateTime","dateTimeStr","console","log","match","error","year","month","day","hour","minute","second","millisecond","date","Date","UTC","parseInt","err","parseTracerData","xmlText","xmlDoc","DOMParser","parseFromString","getElementsByTagName","length","Error","getDateTime","event","dateTimeElement","datetime","textContent","trim","traceEvents","Array","from","startTime","firstEvent","firstDateTime","getTime","now","getStartTime","interactionGroups","stack","forEach","_parseDateTime","name","getAttribute","keyname","stepMethod","eventType","sequence","baseName","interaction","interactionElement","getInteraction","eventDateTime","eventTimeMs","relativeTimeSeconds","isBegin","includes","isEnd","newNode","startSequence","endSequence","children","startTimeMs","endTime","endTimeMs","rawDateTime","push","node","pop","duration","group","sortedGroups","Object","values","sort","a","b","formatFileSize","bytes","i","Math","floor","parseFloat","pow","toFixed","formatUploadTime","toLocaleTimeString","formatEventTime","datePart","toLocaleDateString","timePart","hour12","timeZone","React","createElement","Fragment","className","ActivityNode","_ref","_node$children","level","siblings","rootTotalDuration","hideMinorEvents","significanceThreshold","expandedNodes","setExpandedNodes","isMaxDurationPath","reduce","max","sibling","isExpanded","setIsExpanded","useState","has","useEffect","hasChildren","parentTotalDuration","sum","getPercentageClass","percent","parentPercentage","totalPercentage","hiddenChildren","filter","child","childDuration","onClick","newExpandedNodes","Set","delete","add","title","undefined","style","marginLeft","map","index","key","App","_profileData","profileData","setProfileData","tracerContent","setTracerContent","setError","isLoading","setIsLoading","setHideMinorEvents","setSignificanceThreshold","filesUploaded","setFilesUploaded","tracer","uploadTime","setUploadTime","hiddenRootNodes","visibleProfileData","clearResults","role","aria-label","collapseAllNodes","expandTopDurationNodes","maxRootNode","processNode","currentNode","_currentNode$children","maxChild","type","checked","onChange","e","target","min","step","value","href","rel","accept","handleFileUpload","fileType","file","files","reader","FileReader","onload","hierarchyData","result","prev","message","onerror","readAsText","activity","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5ada4df7.chunk.js","sourcesContent":["export const parseDateTime = (dateTimeStr) => {\r\n  console.log('Parsing datetime string:', dateTimeStr);\r\n  if (!dateTimeStr) return null;\r\n  \r\n  try {\r\n    // Format: YYYYMMDDTHHMMSS.sss GMT\r\n    const match = dateTimeStr.match(/^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})\\.(\\d{3})/);\r\n    if (!match) {\r\n      console.error('Invalid datetime format:', dateTimeStr);\r\n      return null;\r\n    }\r\n\r\n    // Destructure match array, ignoring first element (full match)\r\n    const [, year, month, day, hour, minute, second, millisecond] = match;\r\n    \r\n    const date = new Date(Date.UTC(\r\n      parseInt(year),\r\n      parseInt(month) - 1, // Months are 0-based\r\n      parseInt(day),\r\n      parseInt(hour),\r\n      parseInt(minute),\r\n      parseInt(second),\r\n      parseInt(millisecond)\r\n    ));\r\n\r\n    console.log('Parsed date:', date);\r\n    return date;\r\n  } catch (err) {\r\n    console.error('Error parsing datetime:', dateTimeStr, err);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const parseTracerData = (xmlText) => {\r\n  const parser = new DOMParser();\r\n  const xmlDoc = parser.parseFromString(xmlText, \"text/xml\");\r\n  \r\n  if (xmlDoc.getElementsByTagName('parsererror').length > 0) {\r\n    throw new Error('Invalid XML format in tracer file');\r\n  }\r\n\r\n  // Helper functions\r\n  const getDateTime = (event) => {\r\n    const dateTimeElement = event.getElementsByTagName('DateTime')[0];\r\n    console.log('DateTime element:', dateTimeElement);\r\n    const datetime = dateTimeElement ? dateTimeElement.textContent.trim() : null;\r\n    console.log('DateTime content:', datetime);\r\n    return datetime;\r\n  };\r\n\r\n  const getInteraction = (event) => {\r\n    const interactionElement = event.getElementsByTagName('Interaction')[0];\r\n    return interactionElement ? interactionElement.textContent : 'Unknown';\r\n  };\r\n\r\n  const getStartTime = (firstEvent) => {\r\n    const firstDateTime = getDateTime(firstEvent);\r\n    return firstDateTime ? parseDateTime(firstDateTime).getTime() : Date.now();\r\n  };\r\n\r\n  const traceEvents = Array.from(xmlDoc.getElementsByTagName('TraceEvent'));\r\n  const startTime = getStartTime(traceEvents[0]);\r\n  \r\n  // Create interaction groups object\r\n  const interactionGroups = {};\r\n  const stack = [];\r\n  \r\n  traceEvents.forEach((event) => {\r\n    const name = event.getAttribute('name') || '';\r\n    const keyname = event.getAttribute('keyname') || name;\r\n    const stepMethod = event.getAttribute('stepMethod') || '';\r\n    const eventType = event.getAttribute('eventType') || '';\r\n    const sequence = event.getAttribute('sequence') || '';\r\n    const baseName = keyname;\r\n    const interaction = getInteraction(event);\r\n    \r\n    const eventDateTime = getDateTime(event);\r\n    const eventTimeMs = parseDateTime(eventDateTime)?.getTime();\r\n    const relativeTimeSeconds = eventTimeMs ? (eventTimeMs - startTime) / 1000 : 0;\r\n\r\n    const isBegin = stepMethod.includes('Begin') || \r\n                    eventType.includes('Begin') ||\r\n                    (name.includes('Data Page') && stepMethod.includes('Load Begin'));\r\n                    \r\n    const isEnd = stepMethod.includes('End') || \r\n                  eventType.includes('End') ||\r\n                  (name.includes('Data Page') && stepMethod.includes('Load End'));\r\n\r\n    // Skip Data Page instance found/fresh events\r\n    if (name.includes('Data Page') && \r\n        (stepMethod.includes('instance found') || \r\n         stepMethod.includes('is fresh'))) {\r\n      return;\r\n    }\r\n\r\n    if (isBegin) {\r\n      const newNode = {\r\n        name: baseName,\r\n        startSequence: sequence,\r\n        endSequence: null,\r\n        children: [],\r\n        interaction,\r\n        startTime: relativeTimeSeconds,\r\n        startTimeMs: eventTimeMs,\r\n        endTime: null,\r\n        endTimeMs: null,\r\n        stepMethod,\r\n        eventType,\r\n        rawDateTime: eventDateTime\r\n      };\r\n      \r\n      if (stack.length > 0) {\r\n        stack[stack.length - 1].children.push(newNode);\r\n      } else {\r\n        // Create interaction group if it doesn't exist\r\n        if (!interactionGroups[interaction]) {\r\n          interactionGroups[interaction] = {\r\n            name: `Interaction ${interaction}`,\r\n            children: [],\r\n            interaction,\r\n            startTime: relativeTimeSeconds,\r\n            startTimeMs: eventTimeMs,\r\n            startSequence: sequence,\r\n            endSequence: null,\r\n            rawDateTime: eventDateTime\r\n          };\r\n        }\r\n        interactionGroups[interaction].children.push(newNode);\r\n      }\r\n      stack.push(newNode);\r\n    }\r\n    else if (isEnd) {\r\n      if (stack.length > 0 && stack[stack.length - 1].name === baseName) {\r\n        const node = stack.pop();\r\n        node.endTime = relativeTimeSeconds;\r\n        node.endTimeMs = eventTimeMs;\r\n        node.duration = (node.endTimeMs - node.startTimeMs) / 1000;\r\n        node.endSequence = sequence;\r\n        \r\n        // Update interaction group end time if this is a top-level node\r\n        if (stack.length === 0) {\r\n          const group = interactionGroups[node.interaction];\r\n          if (group) {\r\n            group.endTime = relativeTimeSeconds;\r\n            group.endTimeMs = eventTimeMs;\r\n            group.duration = (group.endTimeMs - group.startTimeMs) / 1000;\r\n            group.endSequence = sequence;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  // Convert interaction groups to array and sort by startTime\r\n  const sortedGroups = Object.values(interactionGroups).sort((a, b) => a.startTime - b.startTime);\r\n  \r\n  // Debug log to check the data\r\n  console.log('First interaction group:', sortedGroups[0]);\r\n  console.log('Last interaction group:', sortedGroups[sortedGroups.length - 1]);\r\n  \r\n  return sortedGroups;\r\n}; ","import React from 'react';\r\nimport { parseDateTime } from './tracerParser';\r\n\r\nexport const formatFileSize = (bytes) => {\r\n  if (!bytes) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\r\n};\r\n\r\nexport const formatUploadTime = (date) => {\r\n  if (!date) return '';\r\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n};\r\n\r\nexport const formatEventTime = (dateTimeStr) => {\r\n  if (!dateTimeStr) return '';\r\n  const date = parseDateTime(dateTimeStr);\r\n  if (!date) return '';\r\n  \r\n  try {\r\n    const datePart = date.toLocaleDateString([], {\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      year: 'numeric'\r\n    });\r\n    \r\n    const timePart = date.toLocaleTimeString([], {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n      hour12: true\r\n    });\r\n\r\n    const timeZone = 'GMT+1'; // Or use date.getTimezoneOffset() to calculate dynamically\r\n    \r\n    return (\r\n      <>\r\n        {datePart}<br />\r\n        {timePart}<br />\r\n        <span className=\"timezone\">{timeZone}</span>\r\n      </>\r\n    );\r\n  } catch (err) {\r\n    console.error('Error formatting datetime:', dateTimeStr, err);\r\n    return '';\r\n  }\r\n}; ","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport './styles/index.css';\nimport { parseTracerData } from './utils/tracerParser';\nimport { formatFileSize, formatUploadTime, formatEventTime } from './utils/formatters';\n\nfunction App() {\n  const [profileData, setProfileData] = useState([]);\n  const [tracerContent, setTracerContent] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hideMinorEvents, setHideMinorEvents] = useState(false);\n  const [significanceThreshold, setSignificanceThreshold] = useState(3);\n  const [filesUploaded, setFilesUploaded] = useState({\n    tracer: false\n  });\n  const [uploadTime, setUploadTime] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState(new Set());\n  \n  const handleFileUpload = (event, fileType) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    setIsLoading(true);\n    setError(null);\n    setUploadTime(new Date());\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      try {\n        const hierarchyData = parseTracerData(e.target.result);\n        setProfileData(hierarchyData);\n        setTracerContent(e.target.result);\n        setFilesUploaded(prev => ({ ...prev, tracer: true }));\n      } catch (err) {\n        console.error(`Error parsing ${fileType} file:`, err);\n        setError(`Error parsing ${fileType} file: ` + err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    reader.onerror = () => {\n      setError(`Error reading ${fileType} file`);\n      setIsLoading(false);\n    };\n\n    reader.readAsText(file);\n  };\n\n  const rootTotalDuration = profileData.reduce((sum, node) => sum + (node.duration || 0), 0);\n  const hiddenRootNodes = profileData.filter(node => {\n    const percentage = rootTotalDuration > 0 ? (node.duration / rootTotalDuration) * 100 : 0;\n    return percentage < significanceThreshold;\n  });\n\n  const visibleProfileData = hideMinorEvents \n    ? profileData.filter(node => {\n        const percentage = rootTotalDuration > 0 ? (node.duration / rootTotalDuration) * 100 : 0;\n        return percentage >= significanceThreshold;\n      })\n    : profileData;\n\n  const collapseAllNodes = () => {\n    setExpandedNodes(new Set());\n  };\n\n  const expandTopDurationNodes = () => {\n    const newExpandedNodes = new Set();\n    \n    // Find root node with max duration\n    const maxRootNode = profileData.reduce((max, node) => \n      (node.duration > (max?.duration || 0)) ? node : max\n    , null);\n\n    if (maxRootNode) {\n      // Process the max duration root node\n      const processNode = (currentNode) => {\n        if (!currentNode.children?.length) return;\n        \n        // Find the child with max duration\n        const maxChild = currentNode.children.reduce((max, child) => \n          (child.duration > (max?.duration || 0)) ? child : max\n        , null);\n        \n        if (maxChild) {\n          newExpandedNodes.add(maxChild.startSequence);\n          processNode(maxChild);\n        }\n      };\n      \n      // Start with max duration root node\n      newExpandedNodes.add(maxRootNode.startSequence);\n      processNode(maxRootNode);\n    }\n    \n    setExpandedNodes(newExpandedNodes);\n  };\n\n  // Add clearResults function\n  const clearResults = () => {\n    setProfileData([]);\n    setTracerContent(null);\n    setError(null);\n    setIsLoading(false);\n    setFilesUploaded({ tracer: false });\n    setUploadTime(null);\n    setExpandedNodes(new Set());\n    setHideMinorEvents(false);\n  };\n\n  return (\n    <>\n      {/* Only show sidebar if profileData has items */}\n      {profileData.length > 0 && (\n        <div className=\"sidebar\">\n          <div className=\"sidebar-header\">\n            Visualization Controls\n          </div>\n          <div className=\"sidebar-section\">\n            <div className=\"sidebar-section-title\">File</div>\n            <div className=\"sidebar-buttons\">\n              <button \n                className=\"btn btn-danger\"\n                onClick={clearResults}\n              >\n                <span role=\"img\" aria-label=\"delete\">🗑️</span> Clear Results\n              </button>\n            </div>\n            {tracerContent && (\n              <div className=\"file-metadata\">\n                <div className=\"metadata-item\">\n                  <span className=\"metadata-label\">Interactions:</span>\n                  <span className=\"metadata-value\">{profileData.length}</span>\n                </div>\n                <div className=\"metadata-item\">\n                  <span className=\"metadata-label\">Size:</span>\n                  <span className=\"metadata-value\">{formatFileSize(tracerContent.length)}</span>\n                </div>\n                <div className=\"metadata-item\">\n                  <span className=\"metadata-label\">Uploaded:</span>\n                  <span className=\"metadata-value\">{formatUploadTime(uploadTime)}</span>\n                </div>\n                <div className=\"metadata-item\">\n                  <span className=\"metadata-label\">Last Event:</span>\n                  <span className=\"metadata-value\">\n                    {formatEventTime(profileData[profileData.length - 1]?.rawDateTime)}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"sidebar-section\">\n            <div className=\"sidebar-section-title\">Tree Controls</div>\n            <div className=\"sidebar-buttons\">\n              <button \n                className=\"btn\"\n                onClick={collapseAllNodes}\n              >\n                <span className=\"btn-icon\">▼</span> Collapse All Nodes\n              </button>\n              <button \n                className=\"btn\"\n                onClick={expandTopDurationNodes}\n              >\n                <span role=\"img\" aria-label=\"expand\">▶</span> Expand Top Duration Paths\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"sidebar-section\">\n            <div className=\"sidebar-section-title\">Display Options</div>\n            <div className=\"threshold-control\">\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={hideMinorEvents}\n                  onChange={(e) => setHideMinorEvents(e.target.checked)}\n                />\n                Show only significant events\n              </label>\n              {hideMinorEvents && (\n                <div className=\"threshold-input\">\n                  <label>Threshold:</label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"0.1\"\n                    value={significanceThreshold}\n                    onChange={(e) => setSignificanceThreshold(Math.max(0, Math.min(100, parseFloat(e.target.value) || 0)))}\n                  />\n                  <span>%</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Add footer to bottom of sidebar */}\n          <div className=\"sidebar-footer\">\n          </div>\n        </div>\n      )}\n\n      <div className={`app ${profileData.length > 0 ? 'app-with-sidebar' : ''}`}>\n        {/* Only show header when no file is loaded */}\n        {!profileData.length && (\n          <>\n            <h1>Pega Tracer Event Performance Visualizer</h1>\n            <div className=\"header-subtitle\">\n              Analyze and visualize Pega tracer events to identify performance bottlenecks\n            </div>\n            \n            <div className=\"info-panels\">\n              <div className=\"info-panel\">\n                <h2><span role=\"img\" aria-label=\"file\">📄</span> About Tracer Files</h2>\n                <p>\n                  This tool analyzes Pega Tracer XML files, which contain detailed execution logs of your Pega application. \n                  These files can be exported from the Pega Platform's Tracer tool, which records step-by-step execution details \n                  of your application's processes.\n                </p>\n                <a href=\"https://docs.pega.com/bundle/platform-88/page/platform/app-dev/offline-debugging-tracerviewer.html\" \n                   target=\"_blank\" \n                   rel=\"noopener noreferrer\"\n                   className=\"learn-more-link\">\n                  Learn more about Pega Tracer\n                </a>\n              </div>\n\n              <div className=\"info-panel\">\n                <h2><span role=\"img\" aria-label=\"steps\">🔍</span> How It Works</h2>\n                <ol className=\"steps-list\">\n                  <li><strong>Upload:</strong> Start by uploading your Pega Tracer XML file using the button below</li>\n                  <li><strong>Analyze:</strong> The tool will process your file and generate an interactive visualization</li>\n                  <li><strong>Explore:</strong> Navigate through the hierarchical tree view of your application's execution</li>\n                </ol>\n              </div>\n\n              <div className=\"info-panel\">\n                <h2><span role=\"img\" aria-label=\"features\">⚡</span> Key Features</h2>\n                <ul className=\"features-list\">\n                  <li>Hierarchical visualization of execution steps</li>\n                  <li>Performance metrics for each operation</li>\n                  <li>Identification of resource-intensive steps</li>\n                  <li>Duration analysis with percentage breakdowns</li>\n                  <li>Filtering options to focus on significant events</li>\n                </ul>\n              </div>\n            </div>\n\n            {/* Upload section */}\n            <div className=\"controls-section\">\n              <div className=\"upload-section\">\n                <h2 className=\"upload-title\">Please upload a Pega Tracer XML file to begin</h2>\n                <div className=\"file-upload-group\">\n                  <label className=\"btn btn-upload\">\n                    <input\n                      type=\"file\"\n                      accept=\".xml\"\n                      onChange={(e) => handleFileUpload(e, 'tracer')}\n                      className=\"file-input\"\n                    />\n                    <span role=\"img\" aria-label=\"folder\">📁</span>\n                    Choose Tracer XML File\n                    {filesUploaded.tracer && <span className=\"file-uploaded\">✓</span>}\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"info-panels bottom-panels\">\n              <div className=\"info-panel\">\n                <h2><span role=\"img\" aria-label=\"security\">🔒</span> Secure & Private Analysis</h2>\n                <p>\n                  All processing happens locally in your browser. No data is sent to any servers \n                  and no internet connection is required.\n                </p>\n              </div>\n\n              <div className=\"info-panel\">\n                <h2><span role=\"img\" aria-label=\"clipboard\">📋</span> Supported Tracer Actions</h2>\n                <ul className=\"features-list\">\n                  <li>Activities</li>\n                  <li>Data Transforms</li>\n                  <li>Data Pages</li>\n                  <li>Stream Rules</li>\n                </ul>\n                <div className=\"tip tip-text\">\n                  <span role=\"img\" aria-label=\"tip\">💡</span> Tip: Enable the \"Abbreviate Events\" option when capturing your tracer session to reduce the file size.\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n        \n        {error && (\n          <div className=\"error-message\">\n            <span role=\"img\" aria-label=\"error\">❌</span> {error}\n          </div>\n        )}\n\n        {isLoading && (\n          <div className=\"loading-message\">\n            Loading...\n          </div>\n        )}\n\n        {!profileData.length && !error && !isLoading && (\n          <div className=\"empty-state\">\n            <div className=\"empty-state-info\">\n            </div>\n          </div>\n        )}\n\n        <div className=\"chart\">\n          {hideMinorEvents && hiddenRootNodes.length > 0 && (\n            <div className=\"hidden-events-notice\">\n              {hiddenRootNodes.length} root-level event{hiddenRootNodes.length > 1 ? 's' : ''} hidden\n            </div>\n          )}\n          {visibleProfileData.map((node, index) => (\n            <ActivityNode \n              key={node.activity} \n              node={node} \n              siblings={profileData}\n              rootTotalDuration={rootTotalDuration}\n              hideMinorEvents={hideMinorEvents}\n              significanceThreshold={significanceThreshold}\n              expandedNodes={expandedNodes}\n              setExpandedNodes={setExpandedNodes}\n            />\n          ))}\n        </div>\n\n        {/* Only show footer in main section when no file is loaded */}\n        {!profileData.length && (\n          <footer className=\"footer\">\n          </footer>\n        )}\n      </div>\n    </>\n  );\n}\n\n// ActivityNode component with expandable sections\nconst ActivityNode = ({ \n  node, \n  level = 0, \n  siblings = [], \n  rootTotalDuration, \n  hideMinorEvents,\n  significanceThreshold,\n  expandedNodes,\n  setExpandedNodes \n}) => {\n  const isMaxDurationPath = \n    node === siblings.reduce((max, sibling) => \n      (sibling.duration > (max?.duration || 0)) ? sibling : max\n    , null);\n\n  const [isExpanded, setIsExpanded] = useState(() => {\n    return expandedNodes.has(node.startSequence);\n  });\n\n  useEffect(() => {\n    setIsExpanded(expandedNodes.has(node.startSequence));\n  }, [expandedNodes, node.startSequence]);\n  \n  const hasChildren = node.children && node.children.length > 0;\n  const duration = node.duration || 0;\n  const parentTotalDuration = siblings.reduce((sum, sibling) => sum + (sibling.duration || 0), 0);\n  \n  const getPercentageClass = (percent) => {\n    if (percent >= 30) return 'percentage-high';\n    if (percent >= 10) return 'percentage-medium';\n    if (percent >= 3) return 'percentage-low';\n    return 'percentage-minimal';\n  };\n  \n  const parentPercentage = parentTotalDuration > 0 ? (duration / parentTotalDuration) * 100 : 0;\n  const totalPercentage = rootTotalDuration > 0 ? (duration / rootTotalDuration) * 100 : 0;\n  const isMinorEvent = parentPercentage < significanceThreshold;\n  \n  if (hideMinorEvents && isMinorEvent) {\n    return null;\n  }\n\n  const hiddenChildren = node.children?.filter(child => {\n    const childDuration = child.duration || 0;\n    const childPercentage = duration > 0 ? (childDuration / duration) * 100 : 0;\n    return childPercentage < significanceThreshold;\n  });\n\n  return (\n    <div className={`activity-group ${isMaxDurationPath ? 'max-duration-path' : ''}`}>\n      <div className=\"activity-header\">\n        {hasChildren && (\n          <span \n            className=\"expand-icon\"\n            onClick={() => {\n              const newExpandedNodes = new Set(expandedNodes);\n              if (isExpanded) {\n                newExpandedNodes.delete(node.startSequence);\n              } else {\n                newExpandedNodes.add(node.startSequence);\n              }\n              setExpandedNodes(newExpandedNodes);\n            }}\n          >\n            {isExpanded ? '▼' : '▶'}\n          </span>\n        )}\n        <div className=\"activity-title\">\n          <span className=\"activity-name\">\n            {node.name || 'Unknown Activity'}\n            {(node.startSequence || node.endSequence) && (\n              <span className=\"sequence-number\" title=\"Start and end sequence numbers\">\n                {` (#${node.startSequence}→${node.endSequence || '?'})`}\n              </span>\n            )}\n          </span>\n          {node.duration !== undefined && (\n            <span className=\"activity-time\">\n              {` (${node.duration.toFixed(3)}s`}\n              {duration > 0 && (\n                <>\n                  <span className={`percentage-value ${getPercentageClass(parentPercentage)}`}>\n                    {` - ${parentPercentage.toFixed(1)}% of parent`}\n                  </span>\n                  <span className={`percentage-value ${getPercentageClass(totalPercentage)}`}>\n                    {` | ${totalPercentage.toFixed(1)}% of total`}\n                  </span>\n                </>\n              )}\n              {')'}\n            </span>\n          )}\n        </div>\n      </div>\n      \n      {isExpanded && hasChildren && (\n        <div className=\"children\" style={{ marginLeft: '20px' }}>\n          {hideMinorEvents && hiddenChildren.length > 0 && (\n            <div className=\"hidden-events-notice\">\n              {hiddenChildren.length} minor event{hiddenChildren.length > 1 ? 's' : ''} hidden\n            </div>\n          )}\n          {node.children.map((child, index) => (\n            <ActivityNode \n              key={`${child.name}-${index}`}\n              node={child}\n              level={level + 1}\n              siblings={node.children}\n              rootTotalDuration={rootTotalDuration}\n              hideMinorEvents={hideMinorEvents}\n              significanceThreshold={significanceThreshold}\n              expandedNodes={expandedNodes}\n              setExpandedNodes={setExpandedNodes}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}